from flask import Flask, request, jsonify
import face_recognition
import numpy as np

app = Flask(__name__)

# Load known faces and their names (do this once at startup)
known_face_encodings = []
known_face_names = []

def load_known_faces():
    # Load images of people you want to recognize
    # Example:
    kian_image = face_recognition.load_image_file("known_faces/kian.jpg")
    kian_encoding = face_recognition.face_encodings(kian_image)[0]

    usain_image = face_recognition.load_image_file("known_faces/usain_bolt.jpg")
    usain_encoding = face_recognition.face_encodings(usain_image)[0]

    known_face_encodings.extend([kian_encoding, usain_encoding])
    known_face_names.extend(["Kian", "Usain Bolt"])

load_known_faces()

@app.route('/recognize', methods=['POST'])
def recognize_face():
    file = request.files.get('image')
    if not file:
        return jsonify({"error": "No image received"}), 400

    # Read image file as numpy array
    img = face_recognition.load_image_file(file)

    # Get face encodings from the uploaded image
    face_encodings = face_recognition.face_encodings(img)

    if not face_encodings:
        return jsonify({"error": "No faces found"}), 400

    # Just check the first face found for simplicity
    unknown_encoding = face_encodings[0]

    # Compare with known faces
    results = face_recognition.compare_faces(known_face_encodings, unknown_encoding)
    distances = face_recognition.face_distance(known_face_encodings, unknown_encoding)

    # Find best match index (lowest distance)
    best_match_index = np.argmin(distances)

    if results[best_match_index]:
        name = known_face_names[best_match_index]
    else:
        name = "Unknown"

    return jsonify({"name": name})
